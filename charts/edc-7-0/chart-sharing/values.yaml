txdc:
  install:
    vault: false
  fullnameOverride: tx-prod
  ################################
  # EDC ControlPlane + DataPlane #
  ################################
  participant:
    id: "test-participant"
  iatp:
    # Decentralized IDentifier
    id: "did:web:changeme"
    sts:
      dim:
        url: "https://somewhere.dim.org"
      oauth:
        token_url: "https://changeme.org"
        client:
          id: "test-client-id"
          secret_alias: "test-alias"
  controlplane:
    # the ssi object is still needed for the upgradeability test
    # todo: remove this after 0.7.0 is released
    ssi:
      miw:
        url: "http://localhost:8080"
        authorityId: "authorityId"
      oauth:
        client:
          secretAlias: "client-secret"
    service:
      type: NodePort
    endpoints:
      management:
        authKey: password
    image:
      pullPolicy: Always
      tag: "0.7.0-rc1"
      #repository: "edc-controlplane-postgresql-hashicorp-vault"
    securityContext:
      # avoids some errors in the log: cannot write temp files of large multipart requests when R/O
      readOnlyRootFilesystem: false
    bdrs:
      server:
        url: "https://bdrs.test.org"
  dataplane:
    endpoints:
      proxy:
        authKey: password
    image:
      pullPolicy: Always
      tag: "0.7.0-rc1"
      #repository: "edc-dataplane-hashicorp-vault"
    securityContext:
      # avoids some errors in the log: cannot write temp files of large multipart requests when R/O
      readOnlyRootFilesystem: false
    aws:
      endpointOverride: http://minio:9000
      secretAccessKey: qwerty123
      accessKeyId: qwerty123
    token:
      signer:
        privatekey_alias: "key-1"
      verifier:
        publickey_alias: "key-1"
  postgresql:
    jdbcUrl: jdbc:postgresql://country-risk-edc-provider-postgresql:5432/edc
    auth:
      username: user
      password: password
  vault:
    hashicorp:
      url: http://country-risk-edc-provider-vault:8200
      token: root
    secretNames:
      transferProxyTokenEncryptionAesKey: aes-keys
      # this must be set through CLI args: --set vault.secrets=$YOUR_VAULT_SECRETS where YOUR_VAULT_SECRETS should
      # be a string in the format "key1:secret1;key2:secret2;..."
      secrets:

    # the post-start object is still needed for the upgradeability test
    # todo: remove this after 0.7.0 is released
    server:
      postStart:
        - sh
        - -c
        - |-
          {
          sleep 5
  
          /bin/vault kv put secret/client-secret content=kEmH7QRPWhKfy8f+x0pFMw==
  
          /bin/vault kv put secret/aes-keys content=YWVzX2VuY2tleV90ZXN0Cg==
          }
  backendService:
    httpProxyTokenReceiverUrl: "http://backend:8080"
  tests:
    hookDeletePolicy: before-hook-creation