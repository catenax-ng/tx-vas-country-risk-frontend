txdc:
  install:
    daps: false
    postgresql: true
    vault: false
  participant:
    id: "test-participant"
  iatp:
    # Decentralized IDentifier
    id: "did:web:changeme"
    sts:
      dim:
        url: "https://somewhere.dim.org"
      oauth:
        token_url: "https://changeme.org"
        client:
          id: "test-client-id"
          secret_alias: "test-alias"
  controlplane:
    # the ssi object is still needed for the upgradeability test
    # todo: remove this after 0.7.0 is released
    ssi:
      miw:
        url: "http://localhost:8080"
        authorityId: "authorityId"
      oauth:
        client:
          secretAlias: "client-secret"
    ingresses:
      - enabled: false
        hostname: "country-risk.int.demo.catena-x.net"
        annotations: {}
        endpoints:
          - management
          - control
          - protocol
        className: "nginx"
        tls:
          enabled: true
          secretName: "example-tls"
    service:
      type: NodePort
    endpoints:
      management:
        authKey: <path:value-added-service/data/country-risk/int/edc#controlplane-auth>
    image:
      pullPolicy: Always
      tag: "0.7.0-rc1"
      #repository: "edc-controlplane-postgresql-hashicorp-vault"
    securityContext:
      # avoids some errors in the log: cannot write temp files of large multipart requests when R/O
      readOnlyRootFilesystem: false
    bdrs:
      server:
        url: "https://bdrs.test.org"
  dataplane:
    image:
      pullPolicy: Always
      tag: "0.7.0-rc1"
      #repository: "edc-dataplane-hashicorp-vault"
    securityContext:
      # avoids some errors in the log: cannot write temp files of large multipart requests when R/O
      readOnlyRootFilesystem: false
    aws:
      endpointOverride: http://minio:9000
      secretAccessKey: qwerty123
      accessKeyId: qwerty123
    token:
      signer:
        privatekey_alias: "key-1"
      verifier:
        publickey_alias: "key-1"
    ## Ingress declaration to expose the network service.
    ingresses:
      ## Public / Internet facing Ingress
      - enabled: true
        # -- The hostname to be used to precisely map incoming traffic onto the underlying network service
        hostname: "country-risk.int.demo.catena-x.net"
        # -- EDC endpoints exposed by this ingress resource
        endpoints:
          - public
        # -- Defines the [ingress class](https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-class)  to use
        className: "nginx"
        # -- TLS [tls class](https://kubernetes.io/docs/concepts/services-networking/ingress/#tls) applied to the ingress resource
        tls:
          # -- Enables TLS on the ingress resource
          enabled: true
          # -- If present overwrites the default secret name
          secretName: tls-secret
  postgresql:
    enabled: true
    jdbcUrl: "jdbc:postgresql://edc-provider-test-country-risk-postgres:5432/edc"
    fullnameOverride: "edc-provider-test-country-risk-postgres"
    username: user
    password: password
  vault:
    hashicorp:
      enabled: true
      healthCheck:
        enabled: true
        standbyOk: true
      url: "https://vault.demo.catena-x.net"
      token: <path:value-added-service/data/country-risk/int/edc#vault-token-cr>
      paths:
        secret: /v1/value-added-service
    secretNames:
      transferProxyTokenEncryptionAesKey: country-risk/int/edc-provider/DATA_ENCRYPTION_KEYS_ALIAS

    # the post-start object is still needed for the upgradeability test
    # todo: remove this after 0.7.0 is released
    server:
      postStart:
        - sh
        - -c
        - |-
          {
          sleep 5
  
          /bin/vault kv put secret/client-secret content=kEmH7QRPWhKfy8f+x0pFMw==
  
          /bin/vault kv put secret/aes-keys content=YWVzX2VuY2tleV90ZXN0Cg==
          }
  backendService:
    httpProxyTokenReceiverUrl: "http://backend:8080"
  tests:
    hookDeletePolicy: before-hook-creation
