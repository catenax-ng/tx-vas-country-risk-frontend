postgres:
  enabled: true
  auth:
    password: &psqlPassword "psql_password"
    username: &psqlUsername "postgresql_sandbox_user"
    database: edc
  persistence:
    enabled: true

txdc:
  install:
    daps: false
    postgresql: true
    vault: false

  postgresql:
    enabled: true
    jdbcUrl: "jdbc:postgresql://edc-country-risk-postgres:5432/edc"
    fullnameOverride: "edc-country-risk-postgres"
    username: user
    password: password

  iatp:
    # Decentralized IDentifier
    id: "did:web:changeme"
    sts:
      dim:
        url: https://centralidp.int.demo.catena-x.net/auth/realms/CX-Central/protocol/openid-connect/token
      oauth:
        token_url: https://centralidp.int.demo.catena-x.net/auth/realms/CX-Central/protocol/openid-connect/token
        client:
          id: "sa122"
          secret_alias: "country-risk/int/edc-consumer/CLIENT_SECRET"

  controlplane:
    livenessProbe:
      # -- Whether to enable kubernetes [liveness-probe](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/)
      enabled: false
    readinessProbe:
      # -- Whether to enable kubernetes [readiness-probes](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/)
      enabled: true
    endpoints:
      # -- data management api, used by internal users, can be added to an ingress and must not be internet facing
      management:
        # -- authentication key, must be attached to each 'X-Api-Key' request header
        authKey: <path:value-added-service/data/country-risk/int/edc#controlplane-auth>
    ## Ingress declaration to expose the network service.
    ingresses:
      ## Public / Internet facing Ingress
      - enabled: true
        # -- The hostname to be used to precisely map incoming traffic onto the underlying network service
        hostname: "country-risk-provider-member-edc.int.demo.catena-x.net"
        className: "nginx"
        # -- EDC endpoints exposed by this ingress resource
        endpoints:
          - management
          - control
          - protocol
        # -- TLS [tls class](https://kubernetes.io/docs/concepts/services-networking/ingress/#tls) applied to the ingress resource
        tls:
          # -- Enables TLS on the ingress resource
          enabled: true
          # -- If present overwrites the default secret name
          secretName: tls-secret
  dataplane:
    livenessProbe:
      # -- Whether to enable kubernetes [liveness-probe](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/)
      enabled: false
    readinessProbe:
      # -- Whether to enable kubernetes [readiness-probes](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/)
      enabled: true
    ## Ingress declaration to expose the network service.
    ingresses:
      ## Public / Internet facing Ingress
      - enabled: true
        # -- The hostname to be used to precisely map incoming traffic onto the underlying network service
        hostname: "country-risk-provider-member-edc.int.demo.catena-x.net"
        # -- EDC endpoints exposed by this ingress resource
        endpoints:
          - public
        # -- Defines the [ingress class](https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-class)  to use
        className: "nginx"
        # -- TLS [tls class](https://kubernetes.io/docs/concepts/services-networking/ingress/#tls) applied to the ingress resource
        tls:
          # -- Enables TLS on the ingress resource
          enabled: true
          # -- If present overwrites the default secret name
          secretName: tls-secret
    token:
      signer:
        # alias under which the private key is stored in the vault (JWK or PEM format)
        privatekey_alias: country-risk/int/edc-provider/DATA_ENCRYPTION_KEYS_ALIAS
      verifier:
        # alias under which the public key is stored in the vault, that belongs to the private key ("privatekey_alias", JWK or PEM format)
        publickey_alias: country-risk/int/edc-provider/DATA_ENCRYPTION_KEYS_ALIAS

  serviceAccount:
    create: false
